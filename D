// ==UserScript==
// @name         Lichess Bot (stockfish8)
// @description  Fully automated lichess bot - Aggressive Sacrificial Style
// @author       Nuro
// @match        *://lichess.org/*
// @run-at       document-start
// @grant        none
// @require      https://raw.githubusercontent.com/workinworld/stkfish/refs/heads/main/stockfish8.js
// ==/UserScript==

let chessEngine;
let currentFen = "";
let bestMove;
let webSocketWrapper = null;
let gameId = null;
let isWhite = true;
let timeLimitMs = 100;  // Time limit for move calculation

function initializeChessEngine() {
    chessEngine = window.STOCKFISH();
    // Set engine options for aggressive play
    chessEngine.postMessage("setoption name Skill Level value 20"); // Max skill for deeper analysis but...
    chessEngine.postMessage("setoption name Contempt value 100");    // Encourage sacrificing material, play for initiative
    chessEngine.postMessage("setoption name Aggressiveness value 250");// Highly aggressive
    chessEngine.postMessage("setoption name Style value 1");  //Let's make it play like the old Rybka back in the days.
    chessEngine.postMessage("setoption name Pawn Value value 90"); //Decrease the value of pawns to be more disposable.
    chessEngine.postMessage("setoption name Space value 70"); //Play more aggresively for space
    chessEngine.postMessage("setoption name Mobility value 150"); //Prioritize mobility a lot to open games
    chessEngine.postMessage("setoption name King Safety value 10");//Sacrifices are expected when attacking the king, ignore the safety of our king.
    chessEngine.postMessage("setoption name Hash value 128");      // Increase hash size for better performance
    chessEngine.postMessage("setoption name Threads value 1");     // Use only 1 thread for speed
}

function interceptWebSocket() {
    let webSocket = window.WebSocket;
    const webSocketProxy = new Proxy(webSocket, {
        construct: function (target, args) {
            let wrappedWebSocket = new target(...args);
            webSocketWrapper = wrappedWebSocket;

            wrappedWebSocket.addEventListener("message", function (event) {
                let message = JSON.parse(event.data);
                console.log(message);

                if (message.type === "gameFull" && message.id) {
                    gameId = message.id;
                    isWhite = message.white.id === lichess.socket.settings.userId;
                    console.log("Game ID:", gameId);
                    console.log("Playing as white:", isWhite);
                }

                if (message.d && typeof message.d.fen === "string" && typeof message.v === "number") {
                    currentFen = message.d.fen;
                    let isWhitesTurn = message.v % 2 === 0;
                    currentFen += isWhitesTurn ? " w" : " b";

                    calculateMove();
                }

                if (message.type === "gameState" && message.status >= 30) {
                    handleGameEnd();
                }
            });
            return wrappedWebSocket;
        }
    });

    window.WebSocket = webSocketProxy;
}

function calculateMove() {
    chessEngine.postMessage("position fen " + currentFen);
    // Aggressive play favors shallower search to some extent
    chessEngine.postMessage(`go depth 4 movetime ${timeLimitMs}`); // Depth 4 to balance aggression and tactical awareness
}

function setupChessEngineOnMessage() {
    chessEngine.onmessage = function (event) {
        if (event && event.includes("bestmove")) {
            bestMove = event.split(" ")[1];
            webSocketWrapper.send(JSON.stringify({
                t: "move",
                d: { u: bestMove, b: 1, l: 10000, a: 1 }
            }));
        }
    };
}

initializeChessEngine();
interceptWebSocket();
setupChessEngineOnMessage();
